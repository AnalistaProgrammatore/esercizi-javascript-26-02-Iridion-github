/*
3) Scrivere nel file `some.js` le funzioni `someBase` e `someReduce` che presi in input un array e una funzione di callback
ri-producano il comportamento dell metodo `Array.some` di Javascript.
   - la versione `someBase` deve essere implementata in modo imperativo "Come Ã¨ fatta?"
   - la versione `someReduce` deve implementare la funzione utilizzando il metodo `Array.reduce`
*/

const someBase = (arr, func) => func(arr[arr.length - 1]) ? func(arr[arr.length - 1]) : arr.slice(0, -1).length > 0 ? someBase(arr.slice(0, -1), func) : false
console.log('someBase true call returns:', someBase([1, 2, 3, 4, 5], x => x % 4 === 0)) //true
console.log('someBase false call returns:', someBase([1, 2, 3, 3, 5], x => x % 4 === 0)) //false

const someReduce = (arr, func) => arr.reduce(func)
console.log('someReduce true call returns:', someReduce([1, 2, 3, 4, 5], (acc, cur) => acc === true ? acc : cur % 4 === 0)) //true
console.log('someReduce false call returns:', someReduce([1, 2, 3, 3, 5], (acc, cur) => acc === true ? acc : cur % 4 === 0)) //false













































































































































































































































































































































































































































const someBaseForHumanBeings = (arr, func) => {
   let result = func(arr[arr.length - 1])
   if (result === true) {
      return result
   } else {
      let shortened = arr.slice(0, -1)
      return shortened.length > 0 ? someBase(shortened, func) : false
   }
}